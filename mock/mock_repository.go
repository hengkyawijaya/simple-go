// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hengkyawijaya/simple-go/repository (interfaces: ConfigRepository,IPInfoRepository)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	config "github.com/hengkyawijaya/simple-go/repository/config"
)

// MockConfigRepository is a mock of ConfigRepository interface.
type MockConfigRepository struct {
	ctrl     *gomock.Controller
	recorder *MockConfigRepositoryMockRecorder
}

// MockConfigRepositoryMockRecorder is the mock recorder for MockConfigRepository.
type MockConfigRepositoryMockRecorder struct {
	mock *MockConfigRepository
}

// NewMockConfigRepository creates a new mock instance.
func NewMockConfigRepository(ctrl *gomock.Controller) *MockConfigRepository {
	mock := &MockConfigRepository{ctrl: ctrl}
	mock.recorder = &MockConfigRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigRepository) EXPECT() *MockConfigRepositoryMockRecorder {
	return m.recorder
}

// ReadConfig mocks base method.
func (m *MockConfigRepository) ReadConfig() *config.Config {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadConfig")
	ret0, _ := ret[0].(*config.Config)
	return ret0
}

// ReadConfig indicates an expected call of ReadConfig.
func (mr *MockConfigRepositoryMockRecorder) ReadConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadConfig", reflect.TypeOf((*MockConfigRepository)(nil).ReadConfig))
}

// MockIPInfoRepository is a mock of IPInfoRepository interface.
type MockIPInfoRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIPInfoRepositoryMockRecorder
}

// MockIPInfoRepositoryMockRecorder is the mock recorder for MockIPInfoRepository.
type MockIPInfoRepositoryMockRecorder struct {
	mock *MockIPInfoRepository
}

// NewMockIPInfoRepository creates a new mock instance.
func NewMockIPInfoRepository(ctrl *gomock.Controller) *MockIPInfoRepository {
	mock := &MockIPInfoRepository{ctrl: ctrl}
	mock.recorder = &MockIPInfoRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPInfoRepository) EXPECT() *MockIPInfoRepositoryMockRecorder {
	return m.recorder
}

// GetIPInfo mocks base method.
func (m *MockIPInfoRepository) GetIPInfo() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIPInfo")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIPInfo indicates an expected call of GetIPInfo.
func (mr *MockIPInfoRepositoryMockRecorder) GetIPInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIPInfo", reflect.TypeOf((*MockIPInfoRepository)(nil).GetIPInfo))
}
