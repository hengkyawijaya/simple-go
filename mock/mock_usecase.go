// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hengkyawijaya/simple-go/usecase (interfaces: HelloUsecase,AuthUsecase)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockHelloUsecase is a mock of HelloUsecase interface.
type MockHelloUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockHelloUsecaseMockRecorder
}

// MockHelloUsecaseMockRecorder is the mock recorder for MockHelloUsecase.
type MockHelloUsecaseMockRecorder struct {
	mock *MockHelloUsecase
}

// NewMockHelloUsecase creates a new mock instance.
func NewMockHelloUsecase(ctrl *gomock.Controller) *MockHelloUsecase {
	mock := &MockHelloUsecase{ctrl: ctrl}
	mock.recorder = &MockHelloUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHelloUsecase) EXPECT() *MockHelloUsecaseMockRecorder {
	return m.recorder
}

// Hello mocks base method.
func (m *MockHelloUsecase) Hello() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hello")
	ret0, _ := ret[0].(string)
	return ret0
}

// Hello indicates an expected call of Hello.
func (mr *MockHelloUsecaseMockRecorder) Hello() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hello", reflect.TypeOf((*MockHelloUsecase)(nil).Hello))
}

// Hi mocks base method.
func (m *MockHelloUsecase) Hi() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hi")
	ret0, _ := ret[0].(string)
	return ret0
}

// Hi indicates an expected call of Hi.
func (mr *MockHelloUsecaseMockRecorder) Hi() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hi", reflect.TypeOf((*MockHelloUsecase)(nil).Hi))
}

// MockAuthUsecase is a mock of AuthUsecase interface.
type MockAuthUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockAuthUsecaseMockRecorder
}

// MockAuthUsecaseMockRecorder is the mock recorder for MockAuthUsecase.
type MockAuthUsecaseMockRecorder struct {
	mock *MockAuthUsecase
}

// NewMockAuthUsecase creates a new mock instance.
func NewMockAuthUsecase(ctrl *gomock.Controller) *MockAuthUsecase {
	mock := &MockAuthUsecase{ctrl: ctrl}
	mock.recorder = &MockAuthUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthUsecase) EXPECT() *MockAuthUsecaseMockRecorder {
	return m.recorder
}

// IsAuthorized mocks base method.
func (m *MockAuthUsecase) IsAuthorized() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAuthorized")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAuthorized indicates an expected call of IsAuthorized.
func (mr *MockAuthUsecaseMockRecorder) IsAuthorized() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAuthorized", reflect.TypeOf((*MockAuthUsecase)(nil).IsAuthorized))
}
